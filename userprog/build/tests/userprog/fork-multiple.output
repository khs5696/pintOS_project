Kernel command line: -q -f put fork-multiple run fork-multiple
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  157,081,600 loops/s.
hd0:0: detected 321 sector (160 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 20,160 sector (9 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 104 sector (52 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'fork-multiple' into the file system...
Executing 'fork-multiple':
(fork-multiple) begin
child: exit(-1)
(fork-multiple) Parent: child exit status is 4
child: dying due to interrupt 0x03 (#BP Breakpoint Exception).
Interrupt 0x03 (#BP Breakpoint Exception) at rip=4033d3
 cr2=0000000000000000 error=               0
rax 0000000000000000 rbx 0000000000000000 rcx 0000000000000000 rdx 0000000000000000
rsp 000000004747ff18 rbp 000000004747ff60 rsi 0000000000000000 rdi 00000000004043d0
rip 00000000004033d3 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000000 r12 0000000000000000 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000216
es: 001b ds: 001b cs: 0023 ss: 001b
Interrupt 0x0d (#GP General Protection Exception) at rip=800421c652
 cr2=0000000000000000 error=               0
rax cccccccccccccb5c rbx 0000000000000000 rcx 0000008004241298 rdx 000000800421dafd
rsp 0000008004241ec0 rbp 0000008004241ef0 rsi 0000008004241f40 rdi 0000008004241150
rip 000000800421c652 r8 0000000000000000  r9 0000000000000000 r10 0000000000000000
r11 0000000000000216 r12 000000800421d6d4 r13 0000000000000000 r14 0000000000000000
r15 0000000000000000 rflags 00000296
es: 001b ds: 001b cs: 0008 ss: 0010
Kernel PANIC at ../../userprog/exception.c:95 in kill(): Kernel bug - unexpected interrupt in kernel
Call stack: 0x800421883d 0x800421d41d 0x800420978b 0x8004209ba9 0x800421db19 0x800421d7d6 0x800421d58f 0x40013b 0x4001b3 0x400229 0x400cca.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 71 ticks
Thread: 34 idle ticks, 28 kernel ticks, 9 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 87 reads, 236 writes
hd1:0: 104 reads, 0 writes
Console: 2341 characters output
Key