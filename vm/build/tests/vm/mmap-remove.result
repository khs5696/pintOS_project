FAIL
Kernel panic in run: PANIC at ../../devices/disk.c:411 in select_sector(): assertion `sec_no < d->capacity' failed.
Call stack: 0x80042188bf 0x8004214998 0x8004213f4c 0x8004220c5c 0x800421fc5d 0x8004222ad5 0x800422277c 0x80042222dc 0x800422207c 0x800421d797 0x800420980d 0x8004209c2b 0x4002f9 0x400e51 0x400e9a
Translation of call stack:
0x00000080042188bf: debug_panic (lib/kernel/debug.c:32)
0x0000008004214998: select_sector (devices/disk.c:412)
0x0000008004213f4c: disk_read (devices/disk.c:220)
0x0000008004220c5c: inode_read_at (filesys/inode.c:205)
0x000000800421fc5d: file_read (filesys/file.c:74)
0x0000008004222ad5: lazy_load_segment (vm/file.c:88)
0x000000800422277c: uninit_initialize (vm/uninit.c:69 (discriminator 4))
0x00000080042222dc: vm_do_claim_page (vm/vm.c:346)
0x000000800422207c: vm_try_handle_fault (vm/vm.c:275)
0x000000800421d797: page_fault (userprog/exception.c:141)
0x000000800420980d: intr_handler (threads/interrupt.c:352)
0x0000008004209c2b: intr_entry (threads/intr-stubs.o:?)
0x00000000004002f9: (unknown)
0x0000000000400e51: (unknown)
0x0000000000400e9a: (unknown)

This assertion commonly fails when accessing a file via an inode that
has been closed and freed.  Freeing an inode clears all its sector
indexes to 0xcccccccc, which is not a valid sector number for disks
smaller than about 1.6 TB.
